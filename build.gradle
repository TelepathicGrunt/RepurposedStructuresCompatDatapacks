import groovy.json.JsonSlurper

plugins {
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

subprojects {
    apply plugin: "me.modmuss50.mod-publish-plugin"

    tasks.register('createJar', Zip) {
        outputs.upToDateWhen { false }

        from "$projectDir/src"
        archiveFileName = "${project.mod_id}_v${project.mod_version}.jar"
        destinationDirectory = file("$projectDir/built")

        filesMatching(['META-INF/mods.toml', 'fabric.mod.json']) {
            filter {
                it.replace("\${mod_id}", "${project.mod_id}")
                    .replace("\${mod_dependency_name}", "${project.mod_dependency_name}")
                    .replace("\${mod_authors}", "${project.mod_authors}")
                    .replace("\${mod_license}", "${project.mod_license}")
                    .replace("\${mod_version}", "${project.mod_version}")
                    .replace("\${minecraft_version}", "${project.minecraft_version}")
            }
        }
    }

    tasks.register('buildAndRelease') {}
    tasks.publishMods.mustRunAfter tasks.createJar
    tasks.buildAndRelease.dependsOn(tasks.publishMods)

    afterEvaluate {
        project.version = project.mod_version

        def slurper = new JsonSlurper()
        Map<String, String> projectUploadLocationsParsed = slurper.parseText(project.projectUploadLocations)
        Map<String, List<String>> neoforgeDependenciesParsed = slurper.parseText(project.neoforgeDependencies)
        Map<String, List<String>> fabricDependenciesParsed = slurper.parseText(project.fabricDependencies)
        List<String> loadersParsed = slurper.parseText(project.loaders)

        var env = System.getenv()
        if (projectUploadLocationsParsed != null && loadersParsed != null) {

            File changeLog = rootProject.file("CHANGELOG.md")
            String changeLogText = changeLog.exists() ? changeLog.text : ""

            publishMods {
                dryRun = true
                file = tasks.createJar.archiveFile

                displayName  = "Repurposed Structures - ${project.mod_dependency_name} Compat"
                type = STABLE

                changelog = changeLogText
                loadersParsed.each { loader ->
                    modLoaders.add(loader)
                }

                if (env.CURSEFORGEKEY) {
                    curseforge {
                        accessToken = env.CURSEFORGEKEY

                        println "CF ProjectId = ${projectUploadLocationsParsed["CurseForge"]}"
                        projectId = projectUploadLocationsParsed["CurseForge"]
                        minecraftVersions.add("${project.minecraft_version}")

                        if (loadersParsed.size() > 1) {
                            ArrayList<String> combinedRequiredDeps = new ArrayList<>(neoforgeDependenciesParsed["CurseForge"])
                            combinedRequiredDeps.addAll(fabricDependenciesParsed["CurseForge"])
                            optional(combinedRequiredDeps.toArray(String[]::new))
                        }
                        else {
                            if (loadersParsed[0] == "neoforge") {
                                requires(neoforgeDependenciesParsed["CurseForge"].toArray(String[]::new))
                            }
                            else if (loadersParsed[0] == "fabric") {
                                requires(fabricDependenciesParsed["CurseForge"].toArray(String[]::new))
                            }
                        }
                    }
                }

                if (env.MODRINTH) {
                    modrinth {
                        accessToken = env.MODRINTH

                        projectId = projectUploadLocationsParsed["Modrinth"]
                        minecraftVersions.add("${project.minecraft_version}")

                        if (loadersParsed.size() > 1) {
                            ArrayList<String> combinedRequiredDeps = new ArrayList<>(neoforgeDependenciesParsed["Modrinth"])
                            combinedRequiredDeps.addAll(fabricDependenciesParsed["Modrinth"])
                            optional(combinedRequiredDeps.toArray(String[]::new))
                        }
                        else {
                            if (loadersParsed[0] == "neoforge") {
                                requires(neoforgeDependenciesParsed["Modrinth"].toArray(String[]::new))
                            }
                            else if (loadersParsed[0] == "fabric") {
                                requires(fabricDependenciesParsed["Modrinth"].toArray(String[]::new))
                            }
                        }
                    }
                }
            }
        }
    }
}