import groovy.json.JsonSlurper

plugins {
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

subprojects {
    apply plugin: "com.modrinth.minotaur"
    apply plugin: "com.matthewprenger.cursegradle"

    afterEvaluate {
        def slurper = new JsonSlurper()

        Map<String, String> projectUploadLocationsParsed = slurper.parseText(project.projectUploadLocations)
        Map<String, List<String>> neoforgeDependenciesParsed = slurper.parseText(project.neoforgeDependencies)
        Map<String, List<String>> fabricDependenciesParsed = slurper.parseText(project.fabricDependencies)
        List<String> loadersParsed = slurper.parseText(project.loaders)

        var env = System.getenv()
        if (projectUploadLocationsParsed != null && loadersParsed != null) {

            File changeLog = rootProject.file("CHANGELOG.md")
            String changeLogText = changeLog.exists() ? changeLog.text : ""

            if (env.MODRINTH) {
                modrinth {
                    token = env.MODRINTH
                    versionName = "Repurposed Structures - ${project.mod_dependency_name} Compat"
                    versionNumber = "${project.mod_version}"
                    changelog = changeLogText
                    projectId = projectUploadLocationsParsed["Modrinth"]

                    gameVersions = ["${project.minecraft_version}"]
                    loaders = loadersParsed
                    versionType = "RELEASE"

                    uploadFile = tasks.createJar

                    dependencies {
                        def optionalContainer = getOptional()
                        def requiredContainer = getRequired()

                        if (loadersParsed.size() > 1) {
                            neoforgeDependenciesParsed["Modrinth"].each { dep ->
                                optionalContainer.project(dep)
                            }
                            fabricDependenciesParsed["Modrinth"].each { dep ->
                                optionalContainer.project(dep)
                            }
                        }
                        else {
                            if (loadersParsed[0] == "neoforge") {
                                neoforgeDependenciesParsed["Modrinth"].each { dep ->
                                    requiredContainer.project(dep)
                                }
                            }
                            else if (loadersParsed[0] == "fabric") {
                                fabricDependenciesParsed["Modrinth"].each { dep ->
                                    requiredContainer.project(dep)
                                }
                            }
                        }
                    }
                }
            }

            if (env.CURSEFORGEKEY) {
                curseforge {
                    apiKey = env.CURSEFORGEKEY
                    project { proj ->
                        id =  projectUploadLocationsParsed["CurseForge"]
                        changelogType = "markdown"
                        changelog = changeLogText
                        releaseType = "release"

                        addGameVersion("${project.minecraft_version}")
                        loadersParsed.each { loader ->
                            addGameVersion(loader.capitalize())
                        }

                        mainArtifact(tasks.createJar) {
                            displayName = "Repurposed Structures - ${project.mod_dependency_name} Compat"
                        }

                        if (uploadDependencies.size() > 0) {
                            relations {
                                uploadDependencies.each { dep, required ->
                                    if (required) {
                                        requiredDependency(dep)
                                    }
                                    else {
                                        optionalDependency(dep)
                                    }
                                }
                            }
                        }
                        if (loadersParsed.size() > 1) {
                            neoforgeDependenciesParsed["CurseForge"].each { dep ->
                                optionalDependency(dep)
                            }
                            fabricDependenciesParsed["CurseForge"].each { dep ->
                                optionalDependency(dep)
                            }
                        }
                        else {
                            if (loadersParsed[0] == "neoforge") {
                                neoforgeDependenciesParsed["CurseForge"].each { dep ->
                                    requiredDependency(dep)
                                }
                            }
                            else if (loadersParsed[0] == "fabric") {
                                fabricDependenciesParsed["CurseForge"].each { dep ->
                                    requiredDependency(dep)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_id                  : mod_id,
            mod_dependency_name     : mod_dependency_name,
            mod_authors             : mod_authors,
            mod_license             : mod_license,
            mod_version             : mod_version,
            minecraft_version       : minecraft_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml','fabric.mods.json']) {
        expand replaceProperties + [project: project]
    }
}

task createJar{

}